# 11、xlrd.biffh.unpack_unicode_update_pos函数
def unpack_unicode_update_pos(data, pos, lenlen=2, known_len=None):
    # 初始化字符串长度
    if known_len is not None:
        length = known_len
    else:
        # 检查数据长度是否足够读取长度前缀
        if len(data) < pos + lenlen:
            raise ValueError("Data is too short to read length prefix.")
        # 读取长度前缀(假设是小端序)
        length = int.from_bytes(data[pos:pos + lenlen], byteorder='little')
    # 检查剩余数据长度是否足够读取字符串
    if len(data) < pos + lenlen + length * 2:
        raise ValueError("Data is too short to read the entire string.")
    # 更新 pos 为字符串后面的位置
    new_pos = pos + lenlen + length * 2
    # 读取实际的Unicode字符串(UTF-16LE编码)
    string_data = data[pos + lenlen:new_pos]
    # 解码UTF-16LE编码的字符串
    string_value = string_data.decode('utf-16le')
    # 返回解码后的字符串和新的 pos 值
    return string_value, new_pos
if __name__ == '__main__':
    # 这是一个模拟的BIFF数据
    data = b'\x00\x0A\x00H\x00e\x00l\x00l\x00o\x00,\x00 \x00w\x00o\x00r\x00l\x00d\x00!\x00'
    # 初始位置
    pos = 2
    # 调用模拟的unpack_unicode_update_pos函数
    try:
        string_value, new_pos = unpack_unicode_update_pos(data, pos)
        print(string_value)  # 输出: Hello, world!
        print(f"Updated position: {new_pos}")  # 输出新的位置
    except ValueError as e:
        print(f"An error occurred: {e}")
